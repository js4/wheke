( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Safety Net for Retro                                        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2008, Luke Parrish                            )
( Copyright [c] 2009, Charles Childers                        )
( License: ISC                                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Descr: This code provides a more error-tolerant Retro       )
( Descr: system. It can dect some stack problems and recover  )
( Descr: the system to a clean state in most cases.           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  variable latest
  variable base

  : cleanup last @ heap ! last @ @ last ! compiler off reset ;
  : inbalance ." ERROR: Stack Inbalance! Cleaning up..." cr cleanup ;
  create <list>  ( -a ) 0 , 0 , 0 , 0 , 0 ,
  : >depth ( - ) depth <list> @ 1+ <list> + ! 1 <list> +! ;
  : depth? ( - ) 1 <list> -! <list> @ 1+ <list> + @ depth !if inbalance then ;
  : end <list> @ 0 !if inbalance then ;

---reveal---
  : [prior last @ latest ! last @ @ last ! ; compile-only
  : prior] latest @ last ! ; compile-only

  : . ( n- )   [prior depth 0 =if 0 then . prior] ;
  : , ( n- )   [prior depth 0 =if 0 then , prior] ;
  : / ( xy-z ) [prior dup 0 !if / ;; then drop 1 / prior] ;

  : repeat here >depth ; compile-only
  : again depth? 8 , , ; compile-only

  : for [prior ` for prior] >depth ; compile-only
  : next depth? [prior ` next prior] ; compile-only

  : =if [prior ` =if prior] >depth ; compile-only
  : !if [prior ` !if prior] >depth ; compile-only
  : <if [prior ` <if prior] >depth ; compile-only
  : >if [prior ` >if prior] >depth ; compile-only
  : then [prior ` then prior] depth? ; compile-only

  : ; ` ;; ` [ end ;; [ compile-only

  here is save ] [ 1 @ literal, ] 1 ! 1 4 out wait ;
}}
